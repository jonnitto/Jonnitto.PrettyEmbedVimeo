prototype(Jonnitto.PrettyEmbedVimeo:Component.Vimeo) < prototype(Neos.Fusion:Component) {
    configuration = ${Configuration.setting('Jonnitto.PrettyEmbedVimeo')}

    live = true
    videoID = null

    lightbox = ${this.configuration.defaults.lightbox}
    preserveAspectRatio = ${this.configuration.defaults.preserveAspectRatio}
    allowFullScreen = ${this.configuration.defaults.allowFullScreen}
    loop = ${this.configuration.defaults.loop}
    color = ${this.configuration.defaults.color}
    autopause = ${this.configuration.defaults.autopause}
    background = ${this.configuration.defaults.background}
    muted = ${this.configuration.defaults.muted}
    playsinline = ${this.configuration.defaults.playsinline}
    transparent = ${this.configuration.defaults.transparent}
    previewTitle = ${this.configuration.defaults.previewTitle}
    previewByline = ${this.configuration.defaults.previewByline}
    previewPortrait = ${this.configuration.defaults.previewPortrait}

    # Pass a ratio like this: ${16 / 9}
    ratio = null
    ratio.@process.calculatePaddingTop = ${Jonnitto.PrettyEmbedHelper.paddingTop(value, this.dataFromService ? this.dataFromService.width : null, this.dataFromService ? this.dataFromService.height : null)}

    wrapper = ${Configuration.setting('Jonnitto.PrettyEmbedHelper.wrapper')}

    id = null

    poster = null
    dataFromService = ${Jonnitto.PrettyEmbedVimeo.data(this.videoID)}
    alternativeText = ${this.dataFromService ? this.dataFromService.title : null}

    playButton = Jonnitto.PrettyEmbedHelper:Button.Play

    // Internal
    type = ${this.lightbox ? 'lightbox' : 'inline'}
    thumbnail = ${this.poster ? this.poster : this.dataFromService ? this.dataFromService.thumbnail_url : null}
    @if.hasVideoIdAndThumbnail = ${this.videoID && this.thumbnail}

    renderer = Neos.Fusion:Tag {
        tagName = ${props.live ? 'a' : 'div'}
        attributes {
            id = ${props.id}
            class = Carbon.Eel:BEM {
                block = 'jonnitto-prettyembed'
                modifier = Neos.Fusion:DataStructure {
                    vimeo = true
                    iframe = true
                    ratio = ${props.lightbox && props.preserveAspectRatio ? null : !!props.ratio}
                    type = ${props.type}
                }
            }
            href = ${String.replace(props.configuration.url.href, '%id%', props.videoID)}
            rel = 'noopener'
            target = '_blank'
            style = ${props.lightbox && props.preserveAspectRatio ? null : (props.ratio ? 'padding-top:' + props.ratio : null)}
            data-ratio = ${props.ratio || null}
            data-fs = ${!!props.allowFullScreen}
            data-preserveAspectRatio = ${props.preserveAspectRatio ? 'Yes' : 'no'}
            data-embed = Neos.Fusion:Join {
                src             = ${String.replace(props.configuration.url.embed, '%id%', props.videoID)}
                connect         = ${String.indexOf(props.configuration.url.embed, '?') == -1 ? '?' : '&'}
                autoplay        = 'autoplay=1'
                loop            = ${props.loop ? '&loop=1' : ''}
                color           = ${props.color ? '&color=' + String.replace(props.color, '#', '') : ''}
                autopause       = ${props.autopause ? '' : '&autopause=0'}
                background      = ${props.background ? '' : '&background=0'}
                muted           = ${props.muted ? '&muted=1' : ''}
                playsinline     = ${props.playsinline ? '' : '&playsinline=0'}
                transparent     = ${props.transparent ? '' : '&transparent=0'}
                previewTitle    = ${props.previewTitle ? '' : '&title=0'}
                previewByline   = ${props.previewByline ? '' : '&byline=0'}
                previewPortrait = ${props.previewPortrait ? '' : '&portrait=0'}
            }
        }
        content = afx`
            {props.playButton}
            <img alt={props.alternativeText} src={props.thumbnail} loading='lazy' />
        `

        @process.wrapper = Jonnitto.PrettyEmbedHelper:Wrapper {
            wrapper = ${props.wrapper}
        }
    }
}
